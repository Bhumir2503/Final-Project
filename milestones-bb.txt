Challenge 04
Name/GH Handle: Brandon Bull (bbull5)
Assigned Task: Maze Generation
Repo: Group Repo: https://github.com/Bhumir2503/Final-Project.git


TIME LOG:

DATE  |  TIME  |  TASK
-----------------------------------------------
 Feb 22 | 1.5 hr |  Read up on path finding,
        |        |   graphs, and mazes
-----------------------------------------------
 Feb 28 | 2 hr   | Reviewed SDL, built basic
        |        |   grid as foundation for  
	|        |   for maze generation      
-----------------------------------------------
 Mar 2  | 1 hr   | Built graph, started trying
        |        |  to solve randomized DFS                       
	| ~2 hr  | Fixed SDL rendering bug and 
	|        |  bug where edges outside    
	|        |  screen bounds were added to
	|        |  graph                      


RUBRIC:

 10 pts  |  Code compiles and runs as expected
  2 pts  |  Code is clean and well commented
  4 pts  |  Github repo exists and member has made commits
 14 pts  |  Project solves the proposed problem and is 
         |   reasonably optimized
 10 pts  |  Discretionary. Grader assigns points based on
         |   their understanding of an appropriate solution
	 |   to the proposed problem


REPORT:

  Getting started proved a bit more difficult than I anticipated. Although I've
worked with SDL before, it took me awhile to adapt it to this particular problem.
Also, Project 3 has taken more time than anticipated, which limited my ability to 
focus on the Final Project.
  That being said, I have clear line of sight on how to solve the maze generation. I've
built the basic grid for the maze, as well as the graph representation of each cell in the
grid. My next goal is to turn that graph into a randomized minimum spanning tree. Where ever
the grid intersects the minimum spanning tree, that "wall" will be deleted.
  There are some issues I want to mention here. First, I used SDL only to have some kind of
visual that my code is working. The final version will use a Unity representation provided by
another group member. Second, this rough version is full of bad practice. This is a product of
limited time and the need to have a working prototype. The biggest problem is that the SDL 
rendering is integrated with the maze class. Obviously a terrible idea. Once I solve the maze 
generation, I will clean up the code so that the maze class will handle only the maze construction,
and it will interact with the graphical interface via a separate API.
